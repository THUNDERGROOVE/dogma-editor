/* Generated by codegen.py
 * DO NOT EDIT
 */


#include "cache_types.h"

#include <string.h>

#include "bulkdata.h"

cacheShipTypes cacheShipTypes_load_by(bulkdata *b, uint32_t shipTypeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheShipTypes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheShipTypes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, shipTypeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.shipTypeID = sqlite3_column_int(res, 0);
        t.weaponTypeID = sqlite3_column_int(res, 1);
        t.miningTypeID = sqlite3_column_int(res, 2);
        t.skillTypeID = sqlite3_column_int(res, 3);
    }

    sqlite3_finalize(res);
    return t;
}

cacheStaOperations cacheStaOperations_load_by(bulkdata *b, uint32_t activityID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheStaOperations t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheStaOperations where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, activityID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.activityID = sqlite3_column_int(res, 0);
        t.operationID = sqlite3_column_int(res, 1);
        t.operationName = strdup((char *)sqlite3_column_text(res, 2));
        t.description = strdup((char *)sqlite3_column_text(res, 3));
        t.fringe = sqlite3_column_int(res, 4);
        t.corridor = sqlite3_column_int(res, 5);
        t.hub = sqlite3_column_int(res, 6);
        t.border = sqlite3_column_int(res, 7);
        t.ratio = sqlite3_column_int(res, 8);
        t.caldariStationTypeID = sqlite3_column_int(res, 9);
        t.minmatarStationTypeID = sqlite3_column_int(res, 10);
        t.amarrStationTypeID = sqlite3_column_int(res, 11);
        t.gallenteStationTypeID = sqlite3_column_int(res, 12);
        t.joveStationTypeID = sqlite3_column_int(res, 13);
        t.operationNameID = sqlite3_column_int(res, 14);
        t.descriptionID = sqlite3_column_int(res, 15);
        t.serviceMask = sqlite3_column_int(res, 16);
    }

    sqlite3_finalize(res);
    return t;
}

cacheRamAssemblyLineTypesCategory cacheRamAssemblyLineTypesCategory_load_by(bulkdata *b, uint32_t assemblyLineTypeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheRamAssemblyLineTypesCategory t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheRamAssemblyLineTypesCategory where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, assemblyLineTypeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.assemblyLineTypeID = sqlite3_column_int(res, 0);
        t.categoryID = sqlite3_column_int(res, 1);
        t.timeMultiplier = sqlite3_column_double(res, 2);
        t.materialMultiplier = sqlite3_column_double(res, 3);
        t.activityID = strdup((char *)sqlite3_column_text(res, 4));
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvCategories cacheInvCategories_load_by(bulkdata *b, uint32_t categoryID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvCategories t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvCategories where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, categoryID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.categoryID = sqlite3_column_int(res, 0);
        t.categoryName = strdup((char *)sqlite3_column_text(res, 1));
        t.description = strdup((char *)sqlite3_column_text(res, 2));
        t.published = sqlite3_column_int(res, 3);
        t.iconID = sqlite3_column_int(res, 4);
        t.categoryNameID = sqlite3_column_int(res, 5);
        t.dataID = sqlite3_column_int(res, 6);
    }

    sqlite3_finalize(res);
    return t;
}

cacheDogmaEffects cacheDogmaEffects_load_by(bulkdata *b, uint32_t effectID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheDogmaEffects t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheDogmaEffects where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, effectID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.effectID = sqlite3_column_int(res, 0);
        t.effectName = strdup((char *)sqlite3_column_text(res, 1));
        t.effectCategory = sqlite3_column_int(res, 2);
        t.preExpression = sqlite3_column_int(res, 3);
        t.postExpression = sqlite3_column_int(res, 4);
        t.description = strdup((char *)sqlite3_column_text(res, 5));
        t.guid = strdup((char *)sqlite3_column_text(res, 6));
        t.isOffensive = sqlite3_column_int(res, 7);
        t.isAssistance = sqlite3_column_int(res, 8);
        t.durationAttributeID = sqlite3_column_int(res, 9);
        t.trackingSpeedAttributeID = sqlite3_column_int(res, 10);
        t.dischargeAttributeID = sqlite3_column_int(res, 11);
        t.rangeAttributeID = sqlite3_column_int(res, 12);
        t.falloffAttributeID = sqlite3_column_int(res, 13);
        t.disallowAutoRepeat = sqlite3_column_int(res, 14);
        t.published = sqlite3_column_int(res, 15);
        t.displayName = strdup((char *)sqlite3_column_text(res, 16));
        t.isWarpSafe = sqlite3_column_int(res, 17);
        t.rangeChance = sqlite3_column_int(res, 18);
        t.electronicChance = sqlite3_column_int(res, 19);
        t.propulsionChance = sqlite3_column_int(res, 20);
        t.distribution = sqlite3_column_int(res, 21);
        t.sfxName = strdup((char *)sqlite3_column_text(res, 22));
        t.npcUsageChanceAttributeID = sqlite3_column_int(res, 23);
        t.npcActivationChanceAttributeID = sqlite3_column_int(res, 24);
        t.fittingUsageChanceAttributeID = sqlite3_column_int(res, 25);
        t.iconID = sqlite3_column_int(res, 26);
        t.displayNameID = sqlite3_column_int(res, 27);
        t.descriptionID = sqlite3_column_int(res, 28);
        t.dataID = sqlite3_column_int(res, 29);
    }

    sqlite3_finalize(res);
    return t;
}

cacheRamCompletedStatuses cacheRamCompletedStatuses_load_by(bulkdata *b, uint32_t completedStatus) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheRamCompletedStatuses t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheRamCompletedStatuses where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, completedStatus);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.completedStatus = sqlite3_column_int(res, 0);
        t.completedStatusText = strdup((char *)sqlite3_column_text(res, 1));
        t.description = strdup((char *)sqlite3_column_text(res, 2));
        t.completedStatusTextID = sqlite3_column_int(res, 3);
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvBlueprintTypes cacheInvBlueprintTypes_load_by(bulkdata *b, uint32_t blueprintTypeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvBlueprintTypes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvBlueprintTypes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, blueprintTypeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.blueprintTypeID = sqlite3_column_int(res, 0);
        t.parentBlueprintTypeID = sqlite3_column_int(res, 1);
        t.productTypeID = sqlite3_column_int(res, 2);
        t.productionTime = sqlite3_column_int(res, 3);
        t.techLevel = sqlite3_column_int(res, 4);
        t.researchProductivityTime = sqlite3_column_int(res, 5);
        t.researchMaterialTime = sqlite3_column_int(res, 6);
        t.researchCopyTime = sqlite3_column_int(res, 7);
        t.researchTechTime = sqlite3_column_int(res, 8);
        t.productivityModifier = sqlite3_column_int(res, 9);
        t.materialModifier = sqlite3_column_int(res, 10);
        t.wasteFactor = sqlite3_column_int(res, 11);
        t.chanceOfReverseEngineering = sqlite3_column_double(res, 12);
        t.maxProductionLimit = sqlite3_column_int(res, 13);
    }

    sqlite3_finalize(res);
    return t;
}

cacheRamTypeRequirements cacheRamTypeRequirements_load_by(bulkdata *b, uint32_t typeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheRamTypeRequirements t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheRamTypeRequirements where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, typeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.typeID = sqlite3_column_int(res, 0);
        t.activityID = sqlite3_column_int(res, 1);
        t.requiredTypeID = sqlite3_column_int(res, 2);
        t.quantity = sqlite3_column_int(res, 3);
        t.damagePerJob = sqlite3_column_double(res, 4);
        t.recycle = sqlite3_column_int(res, 5);
    }

    sqlite3_finalize(res);
    return t;
}

cacheCertificateRelationships cacheCertificateRelationships_load_by(bulkdata *b, uint32_t relationshipID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheCertificateRelationships t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheCertificateRelationships where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, relationshipID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.relationshipID = sqlite3_column_int(res, 0);
        t.parentID = sqlite3_column_int(res, 1);
        t.parentTypeID = sqlite3_column_int(res, 2);
        t.parentLevel = sqlite3_column_int(res, 3);
        t.childID = sqlite3_column_int(res, 4);
        t.childTypeID = sqlite3_column_int(res, 5);
    }

    sqlite3_finalize(res);
    return t;
}

cacheDogmaAttributes cacheDogmaAttributes_load_by(bulkdata *b, uint32_t attributeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheDogmaAttributes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheDogmaAttributes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, attributeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.attributeID = sqlite3_column_int(res, 0);
        t.attributeName = strdup((char *)sqlite3_column_text(res, 1));
        t.attributeCategory = sqlite3_column_int(res, 2);
        t.description = strdup((char *)sqlite3_column_text(res, 3));
        t.maxAttributeID = sqlite3_column_int(res, 4);
        t.attributeIdx = sqlite3_column_int(res, 5);
        t.chargeRechargeTimeID = sqlite3_column_int(res, 6);
        t.defaultValue = sqlite3_column_double(res, 7);
        t.published = sqlite3_column_int(res, 8);
        t.displayName = strdup((char *)sqlite3_column_text(res, 9));
        t.unitID = sqlite3_column_int(res, 10);
        t.stackable = sqlite3_column_int(res, 11);
        t.highIsGood = sqlite3_column_int(res, 12);
        t.categoryID = sqlite3_column_int(res, 13);
        t.iconID = sqlite3_column_int(res, 14);
        t.displayNameID = sqlite3_column_int(res, 15);
        t.dataID = sqlite3_column_int(res, 16);
    }

    sqlite3_finalize(res);
    return t;
}

cacheRamAssemblyLineTypes cacheRamAssemblyLineTypes_load_by(bulkdata *b, uint32_t assemblyLineTypeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheRamAssemblyLineTypes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheRamAssemblyLineTypes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, assemblyLineTypeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.assemblyLineTypeID = sqlite3_column_int(res, 0);
        t.assemblyLineTypeName = strdup((char *)sqlite3_column_text(res, 1));
        t.description = strdup((char *)sqlite3_column_text(res, 2));
        t.baseTimeMultiplier = sqlite3_column_double(res, 3);
        t.baseMaterialMultiplier = sqlite3_column_double(res, 4);
        t.volume = sqlite3_column_double(res, 5);
        t.activityID = sqlite3_column_int(res, 6);
        t.minCostPerHour = sqlite3_column_double(res, 7);
    }

    sqlite3_finalize(res);
    return t;
}

cacheStaStationsStatic cacheStaStationsStatic_load_by(bulkdata *b, uint32_t stationID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheStaStationsStatic t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheStaStationsStatic where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, stationID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.stationID = sqlite3_column_int(res, 0);
        t.stationName = strdup((char *)sqlite3_column_text(res, 1));
        t.x = sqlite3_column_double(res, 2);
        t.y = sqlite3_column_double(res, 3);
        t.z = sqlite3_column_double(res, 4);
        t.stationTypeID = sqlite3_column_int(res, 5);
        t.solarSystemID = sqlite3_column_int(res, 6);
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvGroups cacheInvGroups_load_by(bulkdata *b, uint32_t groupID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvGroups t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvGroups where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, groupID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.groupID = sqlite3_column_int(res, 0);
        t.categoryID = sqlite3_column_int(res, 1);
        t.groupName = strdup((char *)sqlite3_column_text(res, 2));
        t.description = strdup((char *)sqlite3_column_text(res, 3));
        t.useBasePrice = sqlite3_column_int(res, 4);
        t.allowManufacture = sqlite3_column_int(res, 5);
        t.allowRecycler = sqlite3_column_int(res, 6);
        t.anchored = sqlite3_column_int(res, 7);
        t.anchorable = sqlite3_column_int(res, 8);
        t.fittableNonSingleton = sqlite3_column_int(res, 9);
        t.published = sqlite3_column_int(res, 10);
        t.iconID = sqlite3_column_int(res, 11);
        t.groupNameID = sqlite3_column_int(res, 12);
        t.dataID = sqlite3_column_int(res, 13);
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvMetaTypes cacheInvMetaTypes_load_by(bulkdata *b, uint32_t typeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvMetaTypes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvMetaTypes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, typeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.typeID = sqlite3_column_int(res, 0);
        t.parentTypeID = sqlite3_column_int(res, 1);
        t.metaGroupID = sqlite3_column_int(res, 2);
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvTypeReactions cacheInvTypeReactions_load_by(bulkdata *b, uint32_t reactionTypeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvTypeReactions t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvTypeReactions where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, reactionTypeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.reactionTypeID = sqlite3_column_int(res, 0);
        t.input = sqlite3_column_int(res, 1);
        t.typeID = sqlite3_column_int(res, 2);
        t.quantity = sqlite3_column_int(res, 3);
    }

    sqlite3_finalize(res);
    return t;
}

cacheDogmaTypeEffects cacheDogmaTypeEffects_load_by(bulkdata *b, uint32_t typeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheDogmaTypeEffects t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheDogmaTypeEffects where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, typeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.typeID = sqlite3_column_int(res, 0);
        t.effectID = sqlite3_column_int(res, 1);
        t.isDefault = sqlite3_column_int(res, 2);
    }

    sqlite3_finalize(res);
    return t;
}

cachePlanetSchematics cachePlanetSchematics_load_by(bulkdata *b, uint32_t schematicID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cachePlanetSchematics t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cachePlanetSchematics where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, schematicID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.schematicID = sqlite3_column_int(res, 0);
        t.schematicName = strdup((char *)sqlite3_column_text(res, 1));
        t.cycleTime = sqlite3_column_int(res, 2);
        t.schematicNameID = sqlite3_column_int(res, 3);
        t.dataID = sqlite3_column_int(res, 4);
    }

    sqlite3_finalize(res);
    return t;
}

cacheDogmaUnits cacheDogmaUnits_load_by(bulkdata *b, uint32_t unitID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheDogmaUnits t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheDogmaUnits where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, unitID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.unitID = sqlite3_column_int(res, 0);
        t.unitName = strdup((char *)sqlite3_column_text(res, 1));
        t.displayName = strdup((char *)sqlite3_column_text(res, 2));
        t.description = strdup((char *)sqlite3_column_text(res, 3));
        t.displayNameID = sqlite3_column_int(res, 4);
        t.descriptionID = sqlite3_column_int(res, 5);
        t.dataID = sqlite3_column_int(res, 6);
    }

    sqlite3_finalize(res);
    return t;
}

cachePlanetSchematicsTypeMap cachePlanetSchematicsTypeMap_load_by(bulkdata *b, uint32_t schematicID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cachePlanetSchematicsTypeMap t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cachePlanetSchematicsTypeMap where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, schematicID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.schematicID = sqlite3_column_int(res, 0);
        t.typeID = sqlite3_column_int(res, 1);
        t.isInput = sqlite3_column_int(res, 2);
        t.quantity = sqlite3_column_int(res, 3);
    }

    sqlite3_finalize(res);
    return t;
}

cacheDogmaTypeAttributes cacheDogmaTypeAttributes_load_by(bulkdata *b, uint32_t typeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheDogmaTypeAttributes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheDogmaTypeAttributes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, typeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.typeID = sqlite3_column_int(res, 0);
        t.attributeID = sqlite3_column_int(res, 1);
        t.value = sqlite3_column_double(res, 2);
    }

    sqlite3_finalize(res);
    return t;
}

cacheDogmaExpressions cacheDogmaExpressions_load_by(bulkdata *b, uint32_t expressionID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheDogmaExpressions t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheDogmaExpressions where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, expressionID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.expressionID = sqlite3_column_int(res, 0);
        t.operandID = sqlite3_column_int(res, 1);
        t.arg1 = sqlite3_column_int(res, 2);
        t.arg2 = sqlite3_column_int(res, 3);
        t.expressionValue = strdup((char *)sqlite3_column_text(res, 4));
        t.description = strdup((char *)sqlite3_column_text(res, 5));
        t.expressionName = strdup((char *)sqlite3_column_text(res, 6));
        t.expressionTypeID = sqlite3_column_int(res, 7);
        t.expressionGroupID = sqlite3_column_int(res, 8);
        t.expressionAttributeID = sqlite3_column_int(res, 9);
    }

    sqlite3_finalize(res);
    return t;
}

cacheRamAssemblyLineTypesGroup cacheRamAssemblyLineTypesGroup_load_by(bulkdata *b, uint32_t assemblyLineTypeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheRamAssemblyLineTypesGroup t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheRamAssemblyLineTypesGroup where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, assemblyLineTypeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.assemblyLineTypeID = sqlite3_column_int(res, 0);
        t.groupID = sqlite3_column_int(res, 1);
        t.timeMultiplier = sqlite3_column_double(res, 2);
        t.materialMultiplier = sqlite3_column_double(res, 3);
        t.activityID = strdup((char *)sqlite3_column_text(res, 4));
    }

    sqlite3_finalize(res);
    return t;
}

cacheResGraphics cacheResGraphics_load_by(bulkdata *b, uint32_t graphicID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheResGraphics t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheResGraphics where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, graphicID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.graphicID = sqlite3_column_int(res, 0);
        t.graphicFile = strdup((char *)sqlite3_column_text(res, 1));
        t.graphicName = strdup((char *)sqlite3_column_text(res, 2));
        t.description = strdup((char *)sqlite3_column_text(res, 3));
        t.obsolete = sqlite3_column_int(res, 4);
        t.graphicType = strdup((char *)sqlite3_column_text(res, 5));
        t.collisionFile = strdup((char *)sqlite3_column_text(res, 6));
        t.paperdollFile = strdup((char *)sqlite3_column_text(res, 7));
        t.animationTemplate = sqlite3_column_int(res, 8);
        t.collidable = sqlite3_column_int(res, 9);
        t.explosionID = sqlite3_column_int(res, 10);
        t.directoryID = sqlite3_column_int(res, 11);
        t.graphicMinX = sqlite3_column_double(res, 12);
        t.graphicMinY = sqlite3_column_double(res, 13);
        t.graphicMinZ = sqlite3_column_double(res, 14);
        t.graphicMaxX = sqlite3_column_double(res, 15);
        t.graphicMaxY = sqlite3_column_double(res, 16);
        t.graphicMaxZ = sqlite3_column_double(res, 17);
        t.isPrototype = sqlite3_column_int(res, 18);
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvTypes cacheInvTypes_load_by(bulkdata *b, uint32_t typeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvTypes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvTypes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, typeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.typeID = sqlite3_column_int(res, 0);
        t.groupID = sqlite3_column_int(res, 1);
        t.typeName = strdup((char *)sqlite3_column_text(res, 2));
        t.description = strdup((char *)sqlite3_column_text(res, 3));
        t.graphicID = sqlite3_column_int(res, 4);
        t.radius = sqlite3_column_double(res, 5);
        t.mass = sqlite3_column_double(res, 6);
        t.volume = sqlite3_column_double(res, 7);
        t.capacity = sqlite3_column_double(res, 8);
        t.portionSize = sqlite3_column_int(res, 9);
        t.raceID = sqlite3_column_int(res, 10);
        t.basePrice = sqlite3_column_double(res, 11);
        t.published = sqlite3_column_int(res, 12);
        t.marketGroupID = sqlite3_column_int(res, 13);
        t.chanceOfDuplicating = sqlite3_column_double(res, 14);
        t.soundID = sqlite3_column_int(res, 15);
        t.iconID = sqlite3_column_int(res, 16);
        t.dataID = sqlite3_column_int(res, 17);
        t.typeNameID = sqlite3_column_int(res, 18);
        t.descriptionID = sqlite3_column_int(res, 19);
        t.copyTypeID = sqlite3_column_int(res, 20);
    }

    sqlite3_finalize(res);
    return t;
}

cacheResIcons cacheResIcons_load_by(bulkdata *b, uint32_t iconID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheResIcons t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheResIcons where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, iconID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.iconID = sqlite3_column_int(res, 0);
        t.iconFile = strdup((char *)sqlite3_column_text(res, 1));
        t.description = strdup((char *)sqlite3_column_text(res, 2));
        t.obsolete = sqlite3_column_int(res, 3);
        t.iconType = strdup((char *)sqlite3_column_text(res, 4));
        t.directoryID = sqlite3_column_int(res, 5);
    }

    sqlite3_finalize(res);
    return t;
}

cacheActBillTypes cacheActBillTypes_load_by(bulkdata *b, uint32_t billTypeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheActBillTypes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheActBillTypes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, billTypeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.billTypeID = sqlite3_column_int(res, 0);
        t.billTypeName = strdup((char *)sqlite3_column_text(res, 1));
        t.description = strdup((char *)sqlite3_column_text(res, 2));
        t.billTypeNameID = sqlite3_column_int(res, 3);
        t.dataID = sqlite3_column_int(res, 4);
    }

    sqlite3_finalize(res);
    return t;
}

cachePlanetSchematicsPinMap cachePlanetSchematicsPinMap_load_by(bulkdata *b, uint32_t schematicID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cachePlanetSchematicsPinMap t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cachePlanetSchematicsPinMap where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, schematicID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.schematicID = sqlite3_column_int(res, 0);
        t.pinTypeID = sqlite3_column_int(res, 1);
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvContrabandTypes cacheInvContrabandTypes_load_by(bulkdata *b, uint32_t factionID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvContrabandTypes t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvContrabandTypes where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, factionID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.factionID = sqlite3_column_int(res, 0);
        t.typeID = sqlite3_column_int(res, 1);
        t.standingLoss = sqlite3_column_double(res, 2);
        t.confiscateMinSec = sqlite3_column_double(res, 3);
        t.fineByValue = sqlite3_column_double(res, 4);
        t.attackMinSec = sqlite3_column_double(res, 5);
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvMetaGroups cacheInvMetaGroups_load_by(bulkdata *b, uint32_t metaGroupID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvMetaGroups t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvMetaGroups where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, metaGroupID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.metaGroupID = sqlite3_column_int(res, 0);
        t.metaGroupName = strdup((char *)sqlite3_column_text(res, 1));
        t.description = strdup((char *)sqlite3_column_text(res, 2));
        t.iconID = sqlite3_column_int(res, 3);
        t.metaGroupNameID = sqlite3_column_int(res, 4);
        t.descriptionID = sqlite3_column_int(res, 5);
        t.dataID = sqlite3_column_int(res, 6);
    }

    sqlite3_finalize(res);
    return t;
}

cacheCertificates cacheCertificates_load_by(bulkdata *b, uint32_t certificateID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheCertificates t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheCertificates where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, certificateID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.certificateID = sqlite3_column_int(res, 0);
        t.categoryID = sqlite3_column_int(res, 1);
        t.classID = sqlite3_column_int(res, 2);
        t.grade = sqlite3_column_int(res, 3);
        t.corpID = sqlite3_column_int(res, 4);
        t.iconID = sqlite3_column_int(res, 5);
        t.description = strdup((char *)sqlite3_column_text(res, 6));
        t.descriptionID = sqlite3_column_int(res, 7);
        t.dataID = sqlite3_column_int(res, 8);
    }

    sqlite3_finalize(res);
    return t;
}

cacheInvTypeMaterials cacheInvTypeMaterials_load_by(bulkdata *b, uint32_t typeID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheInvTypeMaterials t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheInvTypeMaterials where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, typeID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.typeID = sqlite3_column_int(res, 0);
        t.materialTypeID = sqlite3_column_int(res, 1);
        t.quantity = sqlite3_column_int(res, 2);
    }

    sqlite3_finalize(res);
    return t;
}

cacheResSounds cacheResSounds_load_by(bulkdata *b, uint32_t soundID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheResSounds t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheResSounds where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, soundID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.soundID = sqlite3_column_int(res, 0);
        t.soundFile = strdup((char *)sqlite3_column_text(res, 1));
        t.description = strdup((char *)sqlite3_column_text(res, 2));
        t.obsolete = sqlite3_column_int(res, 3);
    }

    sqlite3_finalize(res);
    return t;
}

cacheRamActivities cacheRamActivities_load_by(bulkdata *b, uint32_t activityID) {
    char *err_msg = NULL;
    sqlite3_stmt *res;
    cacheRamActivities t;
    memset(&t, 0, sizeof(t));
    char *stmt = (char *)"SELECT * from cacheRamActivities where typeID = @id";
    int rc = sqlite3_prepare_v2(b->db, stmt, -1, &res, 0);
    if (rc == SQLITE_OK) {
        int idx = sqlite3_bind_parameter_index(res, "@id");
        sqlite3_bind_int(res, idx, activityID);
    } else {
        fprintf(stderr, "Failed to execute statement: %s", sqlite3_errmsg(b->db));
    }

    int step = sqlite3_step(res);
    if (step == SQLITE_ROW) {
        t.activityID = sqlite3_column_int(res, 0);
        t.activityName = strdup((char *)sqlite3_column_text(res, 1));
        t.iconNo = strdup((char *)sqlite3_column_text(res, 2));
        t.description = strdup((char *)sqlite3_column_text(res, 3));
        t.published = sqlite3_column_int(res, 4);
        t.activityNameID = sqlite3_column_int(res, 5);
        t.descriptionID = sqlite3_column_int(res, 6);
    }

    sqlite3_finalize(res);
    return t;
}

