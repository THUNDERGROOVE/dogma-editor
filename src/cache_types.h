/* Generated by codegen.py
 * DO NOT EDIT
 */


#include <stdio.h>

#include "bulkdata.h"

struct bulkdata;
#ifndef __CACHE_TYPES__H__
#define __CACHE_TYPES__H__

struct cacheShipTypes {
    uint32_t shipTypeID;
    uint32_t weaponTypeID;
    uint32_t miningTypeID;
    uint32_t skillTypeID;
};

struct cacheStaOperations {
    uint32_t activityID;
    uint32_t operationID;
    char *operationName;
    char *description;
    uint32_t fringe;
    uint32_t corridor;
    uint32_t hub;
    uint32_t border;
    uint32_t ratio;
    uint32_t caldariStationTypeID;
    uint32_t minmatarStationTypeID;
    uint32_t amarrStationTypeID;
    uint32_t gallenteStationTypeID;
    uint32_t joveStationTypeID;
    uint32_t operationNameID;
    uint32_t descriptionID;
    uint32_t serviceMask;
};

struct cacheRamAssemblyLineTypesCategory {
    uint32_t assemblyLineTypeID;
    uint32_t categoryID;
    float timeMultiplier;
    float materialMultiplier;
    char *activityID;
};

struct cacheInvCategories {
    uint32_t categoryID;
    char *categoryName;
    char *description;
    uint32_t published;
    uint32_t iconID;
    uint32_t categoryNameID;
    uint32_t dataID;
};

struct cacheDogmaEffects {
    uint32_t effectID;
    char *effectName;
    uint32_t effectCategory;
    uint32_t preExpression;
    uint32_t postExpression;
    char *description;
    char *guid;
    uint32_t isOffensive;
    uint32_t isAssistance;
    uint32_t durationAttributeID;
    uint32_t trackingSpeedAttributeID;
    uint32_t dischargeAttributeID;
    uint32_t rangeAttributeID;
    uint32_t falloffAttributeID;
    uint32_t disallowAutoRepeat;
    uint32_t published;
    char *displayName;
    uint32_t isWarpSafe;
    uint32_t rangeChance;
    uint32_t electronicChance;
    uint32_t propulsionChance;
    uint32_t distribution;
    char *sfxName;
    uint32_t npcUsageChanceAttributeID;
    uint32_t npcActivationChanceAttributeID;
    uint32_t fittingUsageChanceAttributeID;
    uint32_t iconID;
    uint32_t displayNameID;
    uint32_t descriptionID;
    uint32_t dataID;
};

struct cacheRamCompletedStatuses {
    uint32_t completedStatus;
    char *completedStatusText;
    char *description;
    uint32_t completedStatusTextID;
};

struct cacheInvBlueprintTypes {
    uint32_t blueprintTypeID;
    uint32_t parentBlueprintTypeID;
    uint32_t productTypeID;
    uint32_t productionTime;
    uint32_t techLevel;
    uint32_t researchProductivityTime;
    uint32_t researchMaterialTime;
    uint32_t researchCopyTime;
    uint32_t researchTechTime;
    uint32_t productivityModifier;
    uint32_t materialModifier;
    uint32_t wasteFactor;
    float chanceOfReverseEngineering;
    uint32_t maxProductionLimit;
};

struct cacheRamTypeRequirements {
    uint32_t typeID;
    uint32_t activityID;
    uint32_t requiredTypeID;
    uint32_t quantity;
    float damagePerJob;
    uint32_t recycle;
};

struct cacheCertificateRelationships {
    uint32_t relationshipID;
    uint32_t parentID;
    uint32_t parentTypeID;
    uint32_t parentLevel;
    uint32_t childID;
    uint32_t childTypeID;
};

struct cacheDogmaAttributes {
    uint32_t attributeID;
    char *attributeName;
    uint32_t attributeCategory;
    char *description;
    uint32_t maxAttributeID;
    uint32_t attributeIdx;
    uint32_t chargeRechargeTimeID;
    float defaultValue;
    uint32_t published;
    char *displayName;
    uint32_t unitID;
    uint32_t stackable;
    uint32_t highIsGood;
    uint32_t categoryID;
    uint32_t iconID;
    uint32_t displayNameID;
    uint32_t dataID;
};

struct cacheRamAssemblyLineTypes {
    uint32_t assemblyLineTypeID;
    char *assemblyLineTypeName;
    char *description;
    float baseTimeMultiplier;
    float baseMaterialMultiplier;
    float volume;
    uint32_t activityID;
    float minCostPerHour;
};

struct cacheStaStationsStatic {
    uint32_t stationID;
    char *stationName;
    float x;
    float y;
    float z;
    uint32_t stationTypeID;
    uint32_t solarSystemID;
};

struct cacheInvGroups {
    uint32_t groupID;
    uint32_t categoryID;
    char *groupName;
    char *description;
    uint32_t useBasePrice;
    uint32_t allowManufacture;
    uint32_t allowRecycler;
    uint32_t anchored;
    uint32_t anchorable;
    uint32_t fittableNonSingleton;
    uint32_t published;
    uint32_t iconID;
    uint32_t groupNameID;
    uint32_t dataID;
};

struct cacheInvMetaTypes {
    uint32_t typeID;
    uint32_t parentTypeID;
    uint32_t metaGroupID;
};

struct cacheInvTypeReactions {
    uint32_t reactionTypeID;
    uint32_t input;
    uint32_t typeID;
    uint32_t quantity;
};

struct cacheDogmaTypeEffects {
    uint32_t typeID;
    uint32_t effectID;
    uint32_t isDefault;
};

struct cachePlanetSchematics {
    uint32_t schematicID;
    char *schematicName;
    uint32_t cycleTime;
    uint32_t schematicNameID;
    uint32_t dataID;
};

struct cacheDogmaUnits {
    uint32_t unitID;
    char *unitName;
    char *displayName;
    char *description;
    uint32_t displayNameID;
    uint32_t descriptionID;
    uint32_t dataID;
};

struct cachePlanetSchematicsTypeMap {
    uint32_t schematicID;
    uint32_t typeID;
    uint32_t isInput;
    uint32_t quantity;
};

struct cacheDogmaTypeAttributes {
    uint32_t typeID;
    uint32_t attributeID;
    float value;
};

struct cacheDogmaExpressions {
    uint32_t expressionID;
    uint32_t operandID;
    uint32_t arg1;
    uint32_t arg2;
    char *expressionValue;
    char *description;
    char *expressionName;
    uint32_t expressionTypeID;
    uint32_t expressionGroupID;
    uint32_t expressionAttributeID;
};

struct cacheRamAssemblyLineTypesGroup {
    uint32_t assemblyLineTypeID;
    uint32_t groupID;
    float timeMultiplier;
    float materialMultiplier;
    char *activityID;
};

struct cacheResGraphics {
    uint32_t graphicID;
    char *graphicFile;
    char *graphicName;
    char *description;
    uint32_t obsolete;
    char *graphicType;
    char *collisionFile;
    char *paperdollFile;
    uint32_t animationTemplate;
    uint32_t collidable;
    uint32_t explosionID;
    uint32_t directoryID;
    float graphicMinX;
    float graphicMinY;
    float graphicMinZ;
    float graphicMaxX;
    float graphicMaxY;
    float graphicMaxZ;
    uint32_t isPrototype;
};

struct cacheInvTypes {
    uint32_t typeID;
    uint32_t groupID;
    char *typeName;
    char *description;
    uint32_t graphicID;
    float radius;
    float mass;
    float volume;
    float capacity;
    uint32_t portionSize;
    uint32_t raceID;
    float basePrice;
    uint32_t published;
    uint32_t marketGroupID;
    float chanceOfDuplicating;
    uint32_t soundID;
    uint32_t iconID;
    uint32_t dataID;
    uint32_t typeNameID;
    uint32_t descriptionID;
    uint32_t copyTypeID;
};

struct cacheResIcons {
    uint32_t iconID;
    char *iconFile;
    char *description;
    uint32_t obsolete;
    char *iconType;
    uint32_t directoryID;
};

struct cacheActBillTypes {
    uint32_t billTypeID;
    char *billTypeName;
    char *description;
    uint32_t billTypeNameID;
    uint32_t dataID;
};

struct cachePlanetSchematicsPinMap {
    uint32_t schematicID;
    uint32_t pinTypeID;
};

struct cacheInvContrabandTypes {
    uint32_t factionID;
    uint32_t typeID;
    float standingLoss;
    float confiscateMinSec;
    float fineByValue;
    float attackMinSec;
};

struct cacheInvMetaGroups {
    uint32_t metaGroupID;
    char *metaGroupName;
    char *description;
    uint32_t iconID;
    uint32_t metaGroupNameID;
    uint32_t descriptionID;
    uint32_t dataID;
};

struct cacheCertificates {
    uint32_t certificateID;
    uint32_t categoryID;
    uint32_t classID;
    uint32_t grade;
    uint32_t corpID;
    uint32_t iconID;
    char *description;
    uint32_t descriptionID;
    uint32_t dataID;
};

struct cacheEveMessages {
    char *messageKey;
    char *messageType;
    char *urlAudio;
    char *urlIcon;
    uint32_t messageID;
    uint32_t dataID;
    uint32_t bodyID;
    uint32_t titleID;
    uint32_t suppressable;
};

struct cacheInvTypeMaterials {
    uint32_t typeID;
    uint32_t materialTypeID;
    uint32_t quantity;
};

struct cacheResSounds {
    uint32_t soundID;
    char *soundFile;
    char *description;
    uint32_t obsolete;
};

struct cacheRamActivities {
    uint32_t activityID;
    char *activityName;
    char *iconNo;
    char *description;
    uint32_t published;
    uint32_t activityNameID;
    uint32_t descriptionID;
};

cacheShipTypes cacheShipTypes_load_by(bulkdata *b, uint32_t shipTypeID);
cacheStaOperations cacheStaOperations_load_by(bulkdata *b, uint32_t activityID);
cacheRamAssemblyLineTypesCategory cacheRamAssemblyLineTypesCategory_load_by(bulkdata *b, uint32_t assemblyLineTypeID);
cacheInvCategories cacheInvCategories_load_by(bulkdata *b, uint32_t categoryID);
cacheDogmaEffects cacheDogmaEffects_load_by(bulkdata *b, uint32_t effectID);
cacheRamCompletedStatuses cacheRamCompletedStatuses_load_by(bulkdata *b, uint32_t completedStatus);
cacheInvBlueprintTypes cacheInvBlueprintTypes_load_by(bulkdata *b, uint32_t blueprintTypeID);
cacheRamTypeRequirements cacheRamTypeRequirements_load_by(bulkdata *b, uint32_t typeID);
cacheCertificateRelationships cacheCertificateRelationships_load_by(bulkdata *b, uint32_t relationshipID);
cacheDogmaAttributes cacheDogmaAttributes_load_by(bulkdata *b, uint32_t attributeID);
cacheRamAssemblyLineTypes cacheRamAssemblyLineTypes_load_by(bulkdata *b, uint32_t assemblyLineTypeID);
cacheStaStationsStatic cacheStaStationsStatic_load_by(bulkdata *b, uint32_t stationID);
cacheInvGroups cacheInvGroups_load_by(bulkdata *b, uint32_t groupID);
cacheInvMetaTypes cacheInvMetaTypes_load_by(bulkdata *b, uint32_t typeID);
cacheInvTypeReactions cacheInvTypeReactions_load_by(bulkdata *b, uint32_t reactionTypeID);
cacheDogmaTypeEffects cacheDogmaTypeEffects_load_by(bulkdata *b, uint32_t typeID);
cachePlanetSchematics cachePlanetSchematics_load_by(bulkdata *b, uint32_t schematicID);
cacheDogmaUnits cacheDogmaUnits_load_by(bulkdata *b, uint32_t unitID);
cachePlanetSchematicsTypeMap cachePlanetSchematicsTypeMap_load_by(bulkdata *b, uint32_t schematicID);
cacheDogmaTypeAttributes cacheDogmaTypeAttributes_load_by(bulkdata *b, uint32_t typeID);
cacheDogmaExpressions cacheDogmaExpressions_load_by(bulkdata *b, uint32_t expressionID);
cacheRamAssemblyLineTypesGroup cacheRamAssemblyLineTypesGroup_load_by(bulkdata *b, uint32_t assemblyLineTypeID);
cacheResGraphics cacheResGraphics_load_by(bulkdata *b, uint32_t graphicID);
cacheInvTypes cacheInvTypes_load_by(bulkdata *b, uint32_t typeID);
cacheResIcons cacheResIcons_load_by(bulkdata *b, uint32_t iconID);
cacheActBillTypes cacheActBillTypes_load_by(bulkdata *b, uint32_t billTypeID);
cachePlanetSchematicsPinMap cachePlanetSchematicsPinMap_load_by(bulkdata *b, uint32_t schematicID);
cacheInvContrabandTypes cacheInvContrabandTypes_load_by(bulkdata *b, uint32_t factionID);
cacheInvMetaGroups cacheInvMetaGroups_load_by(bulkdata *b, uint32_t metaGroupID);
cacheCertificates cacheCertificates_load_by(bulkdata *b, uint32_t certificateID);
cacheInvTypeMaterials cacheInvTypeMaterials_load_by(bulkdata *b, uint32_t typeID);
cacheResSounds cacheResSounds_load_by(bulkdata *b, uint32_t soundID);
cacheRamActivities cacheRamActivities_load_by(bulkdata *b, uint32_t activityID);
#endif
