/* Generated by codegen.py
 * DO NOT EDIT
 */


#ifndef __CACHE_TYPES__H__
#define __CACHE_TYPES__H__

#include <stdio.h>

#include <stdlib.h>

#include <vector>

#include "bulkdata.h"

#include <list>

struct bulkdata;
struct edit_window;
struct loading_status_t {
    char *label;
    bool done;
};
struct cacheShipTypes {
    uint32_t shipTypeID;
    uint32_t weaponTypeID;
    uint32_t miningTypeID;
    uint32_t skillTypeID;

    bool dirty;
};

struct cacheStaOperations {
    uint32_t activityID;
    uint32_t operationID;
    char *operationName;
    char *description;
    uint32_t fringe;
    uint32_t corridor;
    uint32_t hub;
    uint32_t border;
    uint32_t ratio;
    uint32_t caldariStationTypeID;
    uint32_t minmatarStationTypeID;
    uint32_t amarrStationTypeID;
    uint32_t gallenteStationTypeID;
    uint32_t joveStationTypeID;
    uint32_t operationNameID;
    uint32_t descriptionID;
    uint32_t serviceMask;

    bool dirty;
};

struct cacheRamAssemblyLineTypesCategory {
    uint32_t assemblyLineTypeID;
    uint32_t categoryID;
    float timeMultiplier;
    float materialMultiplier;
    char *activityID;

    bool dirty;
};

struct cacheInvCategories {
    uint32_t categoryID;
    char *categoryName;
    char *description;
    uint32_t published;
    uint32_t iconID;
    uint32_t categoryNameID;
    uint32_t dataID;

    bool dirty;
};

struct cacheDogmaEffects {
    uint32_t effectID;
    char *effectName;
    uint32_t effectCategory;
    uint32_t preExpression;
    uint32_t postExpression;
    char *description;
    char *guid;
    uint32_t isOffensive;
    uint32_t isAssistance;
    uint32_t durationAttributeID;
    uint32_t trackingSpeedAttributeID;
    uint32_t dischargeAttributeID;
    uint32_t rangeAttributeID;
    uint32_t falloffAttributeID;
    uint32_t disallowAutoRepeat;
    uint32_t published;
    char *displayName;
    uint32_t isWarpSafe;
    uint32_t rangeChance;
    uint32_t electronicChance;
    uint32_t propulsionChance;
    uint32_t distribution;
    char *sfxName;
    uint32_t npcUsageChanceAttributeID;
    uint32_t npcActivationChanceAttributeID;
    uint32_t fittingUsageChanceAttributeID;
    uint32_t iconID;
    uint32_t displayNameID;
    uint32_t descriptionID;
    uint32_t dataID;

    bool dirty;
};

struct cacheRamCompletedStatuses {
    uint32_t completedStatus;
    char *completedStatusText;
    char *description;
    uint32_t completedStatusTextID;

    bool dirty;
};

struct cacheInvBlueprintTypes {
    uint32_t blueprintTypeID;
    uint32_t parentBlueprintTypeID;
    uint32_t productTypeID;
    uint32_t productionTime;
    uint32_t techLevel;
    uint32_t researchProductivityTime;
    uint32_t researchMaterialTime;
    uint32_t researchCopyTime;
    uint32_t researchTechTime;
    uint32_t productivityModifier;
    uint32_t materialModifier;
    uint32_t wasteFactor;
    float chanceOfReverseEngineering;
    uint32_t maxProductionLimit;

    bool dirty;
};

struct cacheRamTypeRequirements {
    uint32_t typeID;
    uint32_t activityID;
    uint32_t requiredTypeID;
    uint32_t quantity;
    float damagePerJob;
    uint32_t recycle;

    bool dirty;
};

struct cacheCertificateRelationships {
    uint32_t relationshipID;
    uint32_t parentID;
    uint32_t parentTypeID;
    uint32_t parentLevel;
    uint32_t childID;
    uint32_t childTypeID;

    bool dirty;
};

struct cacheDogmaAttributes {
    uint32_t attributeID;
    char *attributeName;
    uint32_t attributeCategory;
    char *description;
    uint32_t maxAttributeID;
    uint32_t attributeIdx;
    uint32_t chargeRechargeTimeID;
    float defaultValue;
    uint32_t published;
    char *displayName;
    uint32_t unitID;
    uint32_t stackable;
    uint32_t highIsGood;
    uint32_t categoryID;
    uint32_t iconID;
    uint32_t displayNameID;
    uint32_t dataID;

    bool dirty;
};

struct cacheRamAssemblyLineTypes {
    uint32_t assemblyLineTypeID;
    char *assemblyLineTypeName;
    char *description;
    float baseTimeMultiplier;
    float baseMaterialMultiplier;
    float volume;
    uint32_t activityID;
    float minCostPerHour;

    bool dirty;
};

struct cacheStaStationsStatic {
    uint32_t stationID;
    char *stationName;
    float x;
    float y;
    float z;
    uint32_t stationTypeID;
    uint32_t solarSystemID;

    bool dirty;
};

struct cacheInvGroups {
    uint32_t groupID;
    uint32_t categoryID;
    char *groupName;
    char *description;
    uint32_t useBasePrice;
    uint32_t allowManufacture;
    uint32_t allowRecycler;
    uint32_t anchored;
    uint32_t anchorable;
    uint32_t fittableNonSingleton;
    uint32_t published;
    uint32_t iconID;
    uint32_t groupNameID;
    uint32_t dataID;

    bool dirty;
};

struct cacheInvMetaTypes {
    uint32_t typeID;
    uint32_t parentTypeID;
    uint32_t metaGroupID;

    bool dirty;
};

struct cacheInvTypeReactions {
    uint32_t reactionTypeID;
    uint32_t input;
    uint32_t typeID;
    uint32_t quantity;

    bool dirty;
};

struct cacheDogmaTypeEffects {
    uint32_t typeID;
    uint32_t effectID;
    uint32_t isDefault;

    bool dirty;
};

struct cachePlanetSchematics {
    uint32_t schematicID;
    char *schematicName;
    uint32_t cycleTime;
    uint32_t schematicNameID;
    uint32_t dataID;

    bool dirty;
};

struct cacheDogmaUnits {
    uint32_t unitID;
    char *unitName;
    char *displayName;
    char *description;
    uint32_t displayNameID;
    uint32_t descriptionID;
    uint32_t dataID;

    bool dirty;
};

struct cachePlanetSchematicsTypeMap {
    uint32_t schematicID;
    uint32_t typeID;
    uint32_t isInput;
    uint32_t quantity;

    bool dirty;
};

struct cacheDogmaTypeAttributes {
    uint32_t typeID;
    uint32_t attributeID;
    float value;

    bool dirty;
};

struct cacheDogmaExpressions {
    uint32_t expressionID;
    uint32_t operandID;
    uint32_t arg1;
    uint32_t arg2;
    char *expressionValue;
    char *description;
    char *expressionName;
    uint32_t expressionTypeID;
    uint32_t expressionGroupID;
    uint32_t expressionAttributeID;

    bool dirty;
};

struct cacheRamAssemblyLineTypesGroup {
    uint32_t assemblyLineTypeID;
    uint32_t groupID;
    float timeMultiplier;
    float materialMultiplier;
    char *activityID;

    bool dirty;
};

struct cacheResGraphics {
    uint32_t graphicID;
    char *graphicFile;
    char *graphicName;
    char *description;
    uint32_t obsolete;
    char *graphicType;
    char *collisionFile;
    char *paperdollFile;
    uint32_t animationTemplate;
    uint32_t collidable;
    uint32_t explosionID;
    uint32_t directoryID;
    float graphicMinX;
    float graphicMinY;
    float graphicMinZ;
    float graphicMaxX;
    float graphicMaxY;
    float graphicMaxZ;
    uint32_t isPrototype;

    bool dirty;
};

struct cacheInvTypes {
    uint32_t typeID;
    uint32_t groupID;
    char *typeName;
    char *description;
    uint32_t graphicID;
    float radius;
    float mass;
    float volume;
    float capacity;
    uint32_t portionSize;
    uint32_t raceID;
    float basePrice;
    uint32_t published;
    uint32_t marketGroupID;
    float chanceOfDuplicating;
    uint32_t soundID;
    uint32_t iconID;
    uint32_t dataID;
    uint32_t typeNameID;
    uint32_t descriptionID;
    uint32_t copyTypeID;

    bool dirty;
};

struct cacheResIcons {
    uint32_t iconID;
    char *iconFile;
    char *description;
    uint32_t obsolete;
    char *iconType;
    uint32_t directoryID;

    bool dirty;
};

struct cacheActBillTypes {
    uint32_t billTypeID;
    char *billTypeName;
    char *description;
    uint32_t billTypeNameID;
    uint32_t dataID;

    bool dirty;
};

struct cachePlanetSchematicsPinMap {
    uint32_t schematicID;
    uint32_t pinTypeID;

    bool dirty;
};

struct cacheInvContrabandTypes {
    uint32_t factionID;
    uint32_t typeID;
    float standingLoss;
    float confiscateMinSec;
    float fineByValue;
    float attackMinSec;

    bool dirty;
};

struct cacheInvMetaGroups {
    uint32_t metaGroupID;
    char *metaGroupName;
    char *description;
    uint32_t iconID;
    uint32_t metaGroupNameID;
    uint32_t descriptionID;
    uint32_t dataID;

    bool dirty;
};

struct cacheCertificates {
    uint32_t certificateID;
    uint32_t categoryID;
    uint32_t classID;
    uint32_t grade;
    uint32_t corpID;
    uint32_t iconID;
    char *description;
    uint32_t descriptionID;
    uint32_t dataID;

    bool dirty;
};

struct cacheEveMessages {
    char *messageKey;
    char *messageType;
    char *urlAudio;
    char *urlIcon;
    uint32_t messageID;
    uint32_t dataID;
    uint32_t bodyID;
    uint32_t titleID;
    uint32_t suppressable;

    bool dirty;
};

struct cacheInvTypeMaterials {
    uint32_t typeID;
    uint32_t materialTypeID;
    uint32_t quantity;

    bool dirty;
};

struct cacheResSounds {
    uint32_t soundID;
    char *soundFile;
    char *description;
    uint32_t obsolete;

    bool dirty;
};

struct cacheRamActivities {
    uint32_t activityID;
    char *activityName;
    char *iconNo;
    char *description;
    uint32_t published;
    uint32_t activityNameID;
    uint32_t descriptionID;

    bool dirty;
};

cacheShipTypes cacheShipTypes_load_by(bulkdata *b, uint32_t shipTypeID);
cacheStaOperations cacheStaOperations_load_by(bulkdata *b, uint32_t activityID);
cacheRamAssemblyLineTypesCategory cacheRamAssemblyLineTypesCategory_load_by(bulkdata *b, uint32_t assemblyLineTypeID);
cacheInvCategories cacheInvCategories_load_by(bulkdata *b, uint32_t categoryID);
cacheDogmaEffects cacheDogmaEffects_load_by(bulkdata *b, uint32_t effectID);
cacheRamCompletedStatuses cacheRamCompletedStatuses_load_by(bulkdata *b, uint32_t completedStatus);
cacheInvBlueprintTypes cacheInvBlueprintTypes_load_by(bulkdata *b, uint32_t blueprintTypeID);
cacheRamTypeRequirements cacheRamTypeRequirements_load_by(bulkdata *b, uint32_t typeID);
cacheCertificateRelationships cacheCertificateRelationships_load_by(bulkdata *b, uint32_t relationshipID);
cacheDogmaAttributes cacheDogmaAttributes_load_by(bulkdata *b, uint32_t attributeID);
cacheRamAssemblyLineTypes cacheRamAssemblyLineTypes_load_by(bulkdata *b, uint32_t assemblyLineTypeID);
cacheStaStationsStatic cacheStaStationsStatic_load_by(bulkdata *b, uint32_t stationID);
cacheInvGroups cacheInvGroups_load_by(bulkdata *b, uint32_t groupID);
cacheInvMetaTypes cacheInvMetaTypes_load_by(bulkdata *b, uint32_t typeID);
cacheInvTypeReactions cacheInvTypeReactions_load_by(bulkdata *b, uint32_t reactionTypeID);
cacheDogmaTypeEffects cacheDogmaTypeEffects_load_by(bulkdata *b, uint32_t typeID);
cachePlanetSchematics cachePlanetSchematics_load_by(bulkdata *b, uint32_t schematicID);
cacheDogmaUnits cacheDogmaUnits_load_by(bulkdata *b, uint32_t unitID);
cachePlanetSchematicsTypeMap cachePlanetSchematicsTypeMap_load_by(bulkdata *b, uint32_t schematicID);
cacheDogmaTypeAttributes cacheDogmaTypeAttributes_load_by(bulkdata *b, uint32_t typeID);
cacheDogmaExpressions cacheDogmaExpressions_load_by(bulkdata *b, uint32_t expressionID);
cacheRamAssemblyLineTypesGroup cacheRamAssemblyLineTypesGroup_load_by(bulkdata *b, uint32_t assemblyLineTypeID);
cacheResGraphics cacheResGraphics_load_by(bulkdata *b, uint32_t graphicID);
cacheInvTypes cacheInvTypes_load_by(bulkdata *b, uint32_t typeID);
cacheResIcons cacheResIcons_load_by(bulkdata *b, uint32_t iconID);
cacheActBillTypes cacheActBillTypes_load_by(bulkdata *b, uint32_t billTypeID);
cachePlanetSchematicsPinMap cachePlanetSchematicsPinMap_load_by(bulkdata *b, uint32_t schematicID);
cacheInvContrabandTypes cacheInvContrabandTypes_load_by(bulkdata *b, uint32_t factionID);
cacheInvMetaGroups cacheInvMetaGroups_load_by(bulkdata *b, uint32_t metaGroupID);
cacheCertificates cacheCertificates_load_by(bulkdata *b, uint32_t certificateID);
cacheInvTypeMaterials cacheInvTypeMaterials_load_by(bulkdata *b, uint32_t typeID);
cacheResSounds cacheResSounds_load_by(bulkdata *b, uint32_t soundID);
cacheRamActivities cacheRamActivities_load_by(bulkdata *b, uint32_t activityID);
std::vector<cacheShipTypes> cacheShipTypes_load_all(bulkdata *b);
std::vector<cacheStaOperations> cacheStaOperations_load_all(bulkdata *b);
std::vector<cacheRamAssemblyLineTypesCategory> cacheRamAssemblyLineTypesCategory_load_all(bulkdata *b);
std::vector<cacheInvCategories> cacheInvCategories_load_all(bulkdata *b);
std::vector<cacheDogmaEffects> cacheDogmaEffects_load_all(bulkdata *b);
std::vector<cacheRamCompletedStatuses> cacheRamCompletedStatuses_load_all(bulkdata *b);
std::vector<cacheInvBlueprintTypes> cacheInvBlueprintTypes_load_all(bulkdata *b);
std::vector<cacheRamTypeRequirements> cacheRamTypeRequirements_load_all(bulkdata *b);
std::vector<cacheCertificateRelationships> cacheCertificateRelationships_load_all(bulkdata *b);
std::vector<cacheDogmaAttributes> cacheDogmaAttributes_load_all(bulkdata *b);
std::vector<cacheRamAssemblyLineTypes> cacheRamAssemblyLineTypes_load_all(bulkdata *b);
std::vector<cacheStaStationsStatic> cacheStaStationsStatic_load_all(bulkdata *b);
std::vector<cacheInvGroups> cacheInvGroups_load_all(bulkdata *b);
std::vector<cacheInvMetaTypes> cacheInvMetaTypes_load_all(bulkdata *b);
std::vector<cacheInvTypeReactions> cacheInvTypeReactions_load_all(bulkdata *b);
std::vector<cacheDogmaTypeEffects> cacheDogmaTypeEffects_load_all(bulkdata *b);
std::vector<cachePlanetSchematics> cachePlanetSchematics_load_all(bulkdata *b);
std::vector<cacheDogmaUnits> cacheDogmaUnits_load_all(bulkdata *b);
std::vector<cachePlanetSchematicsTypeMap> cachePlanetSchematicsTypeMap_load_all(bulkdata *b);
std::vector<cacheDogmaTypeAttributes> cacheDogmaTypeAttributes_load_all(bulkdata *b);
std::vector<cacheDogmaExpressions> cacheDogmaExpressions_load_all(bulkdata *b);
std::vector<cacheRamAssemblyLineTypesGroup> cacheRamAssemblyLineTypesGroup_load_all(bulkdata *b);
std::vector<cacheResGraphics> cacheResGraphics_load_all(bulkdata *b);
std::vector<cacheInvTypes> cacheInvTypes_load_all(bulkdata *b);
std::vector<cacheResIcons> cacheResIcons_load_all(bulkdata *b);
std::vector<cacheActBillTypes> cacheActBillTypes_load_all(bulkdata *b);
std::vector<cachePlanetSchematicsPinMap> cachePlanetSchematicsPinMap_load_all(bulkdata *b);
std::vector<cacheInvContrabandTypes> cacheInvContrabandTypes_load_all(bulkdata *b);
std::vector<cacheInvMetaGroups> cacheInvMetaGroups_load_all(bulkdata *b);
std::vector<cacheCertificates> cacheCertificates_load_all(bulkdata *b);
std::vector<cacheInvTypeMaterials> cacheInvTypeMaterials_load_all(bulkdata *b);
std::vector<cacheResSounds> cacheResSounds_load_all(bulkdata *b);
std::vector<cacheRamActivities> cacheRamActivities_load_all(bulkdata *b);

struct cache_collection {
    std::vector<cacheShipTypes> cache_cacheShipTypes;
    std::vector<cacheStaOperations> cache_cacheStaOperations;
    std::vector<cacheRamAssemblyLineTypesCategory> cache_cacheRamAssemblyLineTypesCategory;
    std::vector<cacheInvCategories> cache_cacheInvCategories;
    std::vector<cacheDogmaEffects> cache_cacheDogmaEffects;
    std::vector<cacheRamCompletedStatuses> cache_cacheRamCompletedStatuses;
    std::vector<cacheInvBlueprintTypes> cache_cacheInvBlueprintTypes;
    std::vector<cacheRamTypeRequirements> cache_cacheRamTypeRequirements;
    std::vector<cacheCertificateRelationships> cache_cacheCertificateRelationships;
    std::vector<cacheDogmaAttributes> cache_cacheDogmaAttributes;
    std::vector<cacheRamAssemblyLineTypes> cache_cacheRamAssemblyLineTypes;
    std::vector<cacheStaStationsStatic> cache_cacheStaStationsStatic;
    std::vector<cacheInvGroups> cache_cacheInvGroups;
    std::vector<cacheInvMetaTypes> cache_cacheInvMetaTypes;
    std::vector<cacheInvTypeReactions> cache_cacheInvTypeReactions;
    std::vector<cacheDogmaTypeEffects> cache_cacheDogmaTypeEffects;
    std::vector<cachePlanetSchematics> cache_cachePlanetSchematics;
    std::vector<cacheDogmaUnits> cache_cacheDogmaUnits;
    std::vector<cachePlanetSchematicsTypeMap> cache_cachePlanetSchematicsTypeMap;
    std::vector<cacheDogmaTypeAttributes> cache_cacheDogmaTypeAttributes;
    std::vector<cacheDogmaExpressions> cache_cacheDogmaExpressions;
    std::vector<cacheRamAssemblyLineTypesGroup> cache_cacheRamAssemblyLineTypesGroup;
    std::vector<cacheResGraphics> cache_cacheResGraphics;
    std::vector<cacheInvTypes> cache_cacheInvTypes;
    std::vector<cacheResIcons> cache_cacheResIcons;
    std::vector<cacheActBillTypes> cache_cacheActBillTypes;
    std::vector<cachePlanetSchematicsPinMap> cache_cachePlanetSchematicsPinMap;
    std::vector<cacheInvContrabandTypes> cache_cacheInvContrabandTypes;
    std::vector<cacheInvMetaGroups> cache_cacheInvMetaGroups;
    std::vector<cacheCertificates> cache_cacheCertificates;
    std::vector<cacheInvTypeMaterials> cache_cacheInvTypeMaterials;
    std::vector<cacheResSounds> cache_cacheResSounds;
    std::vector<cacheRamActivities> cache_cacheRamActivities;
};

cache_collection cache_load_all(bulkdata *b, loading_status_t *t);
uint32_t cache_count_dirty(cache_collection cc);
void cacheShipTypes_draw_edit(edit_window *e);
void cacheStaOperations_draw_edit(edit_window *e);
void cacheRamAssemblyLineTypesCategory_draw_edit(edit_window *e);
void cacheInvCategories_draw_edit(edit_window *e);
void cacheDogmaEffects_draw_edit(edit_window *e);
void cacheRamCompletedStatuses_draw_edit(edit_window *e);
void cacheInvBlueprintTypes_draw_edit(edit_window *e);
void cacheRamTypeRequirements_draw_edit(edit_window *e);
void cacheCertificateRelationships_draw_edit(edit_window *e);
void cacheDogmaAttributes_draw_edit(edit_window *e);
void cacheRamAssemblyLineTypes_draw_edit(edit_window *e);
void cacheStaStationsStatic_draw_edit(edit_window *e);
void cacheInvGroups_draw_edit(edit_window *e);
void cacheInvMetaTypes_draw_edit(edit_window *e);
void cacheInvTypeReactions_draw_edit(edit_window *e);
void cacheDogmaTypeEffects_draw_edit(edit_window *e);
void cachePlanetSchematics_draw_edit(edit_window *e);
void cacheDogmaUnits_draw_edit(edit_window *e);
void cachePlanetSchematicsTypeMap_draw_edit(edit_window *e);
void cacheDogmaTypeAttributes_draw_edit(edit_window *e);
void cacheDogmaExpressions_draw_edit(edit_window *e);
void cacheRamAssemblyLineTypesGroup_draw_edit(edit_window *e);
void cacheResGraphics_draw_edit(edit_window *e);
void cacheInvTypes_draw_edit(edit_window *e);
void cacheResIcons_draw_edit(edit_window *e);
void cacheActBillTypes_draw_edit(edit_window *e);
void cachePlanetSchematicsPinMap_draw_edit(edit_window *e);
void cacheInvContrabandTypes_draw_edit(edit_window *e);
void cacheInvMetaGroups_draw_edit(edit_window *e);
void cacheCertificates_draw_edit(edit_window *e);
void cacheInvTypeMaterials_draw_edit(edit_window *e);
void cacheResSounds_draw_edit(edit_window *e);
void cacheRamActivities_draw_edit(edit_window *e);


struct search_windows {
bool show_cacheShipTypes_search;
bool show_cacheStaOperations_search;
bool show_cacheRamAssemblyLineTypesCategory_search;
bool show_cacheInvCategories_search;
bool show_cacheDogmaEffects_search;
bool show_cacheRamCompletedStatuses_search;
bool show_cacheInvBlueprintTypes_search;
bool show_cacheRamTypeRequirements_search;
bool show_cacheCertificateRelationships_search;
bool show_cacheDogmaAttributes_search;
bool show_cacheRamAssemblyLineTypes_search;
bool show_cacheStaStationsStatic_search;
bool show_cacheInvGroups_search;
bool show_cacheInvMetaTypes_search;
bool show_cacheInvTypeReactions_search;
bool show_cacheDogmaTypeEffects_search;
bool show_cachePlanetSchematics_search;
bool show_cacheDogmaUnits_search;
bool show_cachePlanetSchematicsTypeMap_search;
bool show_cacheDogmaTypeAttributes_search;
bool show_cacheDogmaExpressions_search;
bool show_cacheRamAssemblyLineTypesGroup_search;
bool show_cacheResGraphics_search;
bool show_cacheInvTypes_search;
bool show_cacheResIcons_search;
bool show_cacheActBillTypes_search;
bool show_cachePlanetSchematicsPinMap_search;
bool show_cacheInvContrabandTypes_search;
bool show_cacheInvMetaGroups_search;
bool show_cacheCertificates_search;
bool show_cacheInvTypeMaterials_search;
bool show_cacheResSounds_search;
bool show_cacheRamActivities_search;
};

extern search_windows sw;

void draw_main_window();

void draw_search_windows(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheShipTypes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheStaOperations(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheRamAssemblyLineTypesCategory(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvCategories(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheDogmaEffects(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheRamCompletedStatuses(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvBlueprintTypes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheRamTypeRequirements(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheCertificateRelationships(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheDogmaAttributes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheRamAssemblyLineTypes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheStaStationsStatic(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvGroups(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvMetaTypes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvTypeReactions(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheDogmaTypeEffects(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cachePlanetSchematics(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheDogmaUnits(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cachePlanetSchematicsTypeMap(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheDogmaTypeAttributes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheDogmaExpressions(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheRamAssemblyLineTypesGroup(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheResGraphics(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvTypes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheResIcons(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheActBillTypes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cachePlanetSchematicsPinMap(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvContrabandTypes(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvMetaGroups(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheCertificates(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheInvTypeMaterials(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheResSounds(cache_collection *cc, std::list<edit_window *> *window_list);
void draw_search_window_cacheRamActivities(cache_collection *cc, std::list<edit_window *> *window_list);
void window_list_draw(std::list<edit_window *> *window_list);
void save_all_dirty(cache_collection *cc, bulkdata *b);
void cacheShipTypes_save_dirty(cache_collection *cc, bulkdata *b);
void cacheStaOperations_save_dirty(cache_collection *cc, bulkdata *b);
void cacheRamAssemblyLineTypesCategory_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvCategories_save_dirty(cache_collection *cc, bulkdata *b);
void cacheDogmaEffects_save_dirty(cache_collection *cc, bulkdata *b);
void cacheRamCompletedStatuses_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvBlueprintTypes_save_dirty(cache_collection *cc, bulkdata *b);
void cacheRamTypeRequirements_save_dirty(cache_collection *cc, bulkdata *b);
void cacheCertificateRelationships_save_dirty(cache_collection *cc, bulkdata *b);
void cacheDogmaAttributes_save_dirty(cache_collection *cc, bulkdata *b);
void cacheRamAssemblyLineTypes_save_dirty(cache_collection *cc, bulkdata *b);
void cacheStaStationsStatic_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvGroups_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvMetaTypes_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvTypeReactions_save_dirty(cache_collection *cc, bulkdata *b);
void cacheDogmaTypeEffects_save_dirty(cache_collection *cc, bulkdata *b);
void cachePlanetSchematics_save_dirty(cache_collection *cc, bulkdata *b);
void cacheDogmaUnits_save_dirty(cache_collection *cc, bulkdata *b);
void cachePlanetSchematicsTypeMap_save_dirty(cache_collection *cc, bulkdata *b);
void cacheDogmaTypeAttributes_save_dirty(cache_collection *cc, bulkdata *b);
void cacheDogmaExpressions_save_dirty(cache_collection *cc, bulkdata *b);
void cacheRamAssemblyLineTypesGroup_save_dirty(cache_collection *cc, bulkdata *b);
void cacheResGraphics_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvTypes_save_dirty(cache_collection *cc, bulkdata *b);
void cacheResIcons_save_dirty(cache_collection *cc, bulkdata *b);
void cacheActBillTypes_save_dirty(cache_collection *cc, bulkdata *b);
void cachePlanetSchematicsPinMap_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvContrabandTypes_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvMetaGroups_save_dirty(cache_collection *cc, bulkdata *b);
void cacheCertificates_save_dirty(cache_collection *cc, bulkdata *b);
void cacheInvTypeMaterials_save_dirty(cache_collection *cc, bulkdata *b);
void cacheResSounds_save_dirty(cache_collection *cc, bulkdata *b);
void cacheRamActivities_save_dirty(cache_collection *cc, bulkdata *b);
#endif
